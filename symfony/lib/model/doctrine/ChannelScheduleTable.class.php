<?php

/**
 * ChannelScheduleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ChannelScheduleTable extends Doctrine_Table
{
	/**
	 *
	 * @return ChannelScheduleTable
	 */
	public static function getInstance()
	{
		return Doctrine_Core::getTable('ChannelSchedule');
	}

	public function getFilmCountByChannel($channelId)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(s.id) count')
			->from('ChannelSchedule s')
			->where('s.channel_id = ?', $channelId)
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $q['count'];
	}

	public function getDetailedByChannel($channelId)
	{
		$scheduleBrutes = Doctrine_Query::create()
			->from('ChannelSchedule cs')
			->leftJoin('cs.Film f')
			->innerJoin('cs.Channel c')
			->where('cs.channel_id = ?', $channelId)
			->orderBy('cs.day, cs.time_hour ASC')
			->execute();

		$schedules = array();
		foreach ($scheduleBrutes as $scheduleBrute){
			$schedules[$scheduleBrute->getDay()][] = array(
				'id' => $scheduleBrute->getId(),
				'film' => $scheduleBrute->getFilmNotInDb() == '1' ? $scheduleBrute->getFilmName() : $scheduleBrute->getFilm()->getName(),
				'film_not_in_bd' => $scheduleBrute->getFilmNotInDb(),
				'time_hour' => $scheduleBrute->getTimeHour(),
				'time_min' => $scheduleBrute->getTimeMin()
			);
		}

		return $schedules;
	}

	public function getFiltered($day, $hour, $channelId, $type)
	{
		$q = Doctrine_Query::create()
			->select('s.time_hour, s.time_min, s.film_not_in_db, s.film_name, c.name channel_name, c.filename channel_filename, c.id channel_id, f.name_ro, f.id film_id, f.url_key film_url_key, f.is_series film_is_series')
			->from('ChannelSchedule s')
			->orderBy('c.name, s.time_hour, s.time_min ASC')
			->leftJoin('s.Film f')
			->innerJoin('s.Channel c')
			->where('s.day = ?', $day)
			->andWhereIn('s.time_hour', array($hour - 1, $hour, $hour + 1));

		if (isset($channelId) and $channelId != ''){
			$q = $q->andWhere('s.channel_id = ?', $channelId);
		}

		if (isset($type)){
			if ($type == 's'){
				$q = $q->andWhere('f.is_series = 1');
			} elseif ($type == 'f') {
				$q = $q->andWhere('f.is_series IS NULL');
			}
		}

		$q = $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

		$results = array();
		foreach ($q as $schedule){
			if (!isset($results[$schedule['channel_id']] )){
				$results[$schedule['channel_id']] =	array(
					'channel_name' => $schedule['channel_name'],
					'channel_filename' => $schedule['channel_filename']
				);
			}

			$results[$schedule['channel_id']]['films'][$schedule['time_hour']][] = array(
				'time_min' => $schedule['time_min'],
				'film_id' => $schedule['film_id'],
				'film_name' => $schedule['film_not_in_db'] == '1' ? $schedule['film_name'] : $schedule['name_ro'],
				'film_url_key' => $schedule['film_url_key'],
				'film_is_series' => $schedule['film_is_series'],
			);
		}

		return $results;
	}

	public function getFilmsByDay($day, $limit)
	{
		$q = Doctrine_Query::create()
			->from('ChannelSchedule s')
			->orderBy('f.visit_count DESC')
			->innerJoin('s.Film f')
			->innerJoin('s.Channel c')
			->groupBy('f.id')
			->where('s.day = ?', $day);

		if (isset($limit)){
			$q = $q->limit($limit);
		}

		return $q->execute();
	}
	
	public function deleteByChannelAndDay($channelId, $day)
	{
		return Doctrine_Query::create()
			->delete('ChannelSchedule s')
			->where('s.channel_id = ? and s.day = ?', array($channelId, $day))
			->execute();
	}

	public function deleteOlderThan($days)
	{
		Doctrine_Query::create()
			->delete('ChannelSchedule s')
			->where('s.day < date_sub(NOW(), interval ? day)', $days)	
			->execute();
	}
	
	public function getNowFilms($limit)
	{
		$q = Doctrine_Query::create()
			->from('ChannelSchedule s')
			->orderBy('f.visit_count DESC')
			->innerJoin('s.Film f')
			->innerJoin('s.Channel c')
			->groupBy('f.id')
			->where('s.day = CURDATE()')
			->andWhere('concat_ws(":", lpad(s.time_hour, 2, "0"), lpad(s.time_min, 2, "0"), "00") >= CURTIME()')
			->orderBy('lpad(s.time_hour, 2, "0") ASC, lpad(s.time_min, 2, "0") ASC');

		if (isset($limit)){
			$q = $q->limit($limit);
		}

		return $q->execute();
	}
}