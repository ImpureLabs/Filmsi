<?php

/**
 * BaseStire
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $content_teaser
 * @property text $content_content
 * @property string $filename
 * @property string $meta_description
 * @property string $meta_keywords
 * @property string $url_key
 * @property bool $about_stars
 * @property date $publish_date
 * @property date $expiration_date
 * @property enum $state
 * @property integer $user_id
 * @property integer $library_id
 * @property integer $photo_album_id
 * @property integer $video_album_id
 * @property PhotoAlbum $PhotoAlbum
 * @property VideoAlbum $VideoAlbum
 * @property sfGuardUser $Author
 * @property Doctrine_Collection $Person
 * @property Doctrine_Collection $Film
 * @property Doctrine_Collection $Cinema
 * @property Doctrine_Collection $FestivalEdition
 * @property Doctrine_Collection $FilmStire
 * @property Doctrine_Collection $PersonStire
 * @property Doctrine_Collection $CinemaStire
 * @property Doctrine_Collection $FestivalEditionStire
 * 
 * @method string              getName()                 Returns the current record's "name" value
 * @method string              getContentTeaser()        Returns the current record's "content_teaser" value
 * @method text                getContentContent()       Returns the current record's "content_content" value
 * @method string              getFilename()             Returns the current record's "filename" value
 * @method string              getMetaDescription()      Returns the current record's "meta_description" value
 * @method string              getMetaKeywords()         Returns the current record's "meta_keywords" value
 * @method string              getUrlKey()               Returns the current record's "url_key" value
 * @method bool                getAboutStars()           Returns the current record's "about_stars" value
 * @method date                getPublishDate()          Returns the current record's "publish_date" value
 * @method date                getExpirationDate()       Returns the current record's "expiration_date" value
 * @method enum                getState()                Returns the current record's "state" value
 * @method integer             getUserId()               Returns the current record's "user_id" value
 * @method integer             getLibraryId()            Returns the current record's "library_id" value
 * @method integer             getPhotoAlbumId()         Returns the current record's "photo_album_id" value
 * @method integer             getVideoAlbumId()         Returns the current record's "video_album_id" value
 * @method PhotoAlbum          getPhotoAlbum()           Returns the current record's "PhotoAlbum" value
 * @method VideoAlbum          getVideoAlbum()           Returns the current record's "VideoAlbum" value
 * @method sfGuardUser         getAuthor()               Returns the current record's "Author" value
 * @method Doctrine_Collection getPerson()               Returns the current record's "Person" collection
 * @method Doctrine_Collection getFilm()                 Returns the current record's "Film" collection
 * @method Doctrine_Collection getCinema()               Returns the current record's "Cinema" collection
 * @method Doctrine_Collection getFestivalEdition()      Returns the current record's "FestivalEdition" collection
 * @method Doctrine_Collection getFilmStire()            Returns the current record's "FilmStire" collection
 * @method Doctrine_Collection getPersonStire()          Returns the current record's "PersonStire" collection
 * @method Doctrine_Collection getCinemaStire()          Returns the current record's "CinemaStire" collection
 * @method Doctrine_Collection getFestivalEditionStire() Returns the current record's "FestivalEditionStire" collection
 * @method Stire               setName()                 Sets the current record's "name" value
 * @method Stire               setContentTeaser()        Sets the current record's "content_teaser" value
 * @method Stire               setContentContent()       Sets the current record's "content_content" value
 * @method Stire               setFilename()             Sets the current record's "filename" value
 * @method Stire               setMetaDescription()      Sets the current record's "meta_description" value
 * @method Stire               setMetaKeywords()         Sets the current record's "meta_keywords" value
 * @method Stire               setUrlKey()               Sets the current record's "url_key" value
 * @method Stire               setAboutStars()           Sets the current record's "about_stars" value
 * @method Stire               setPublishDate()          Sets the current record's "publish_date" value
 * @method Stire               setExpirationDate()       Sets the current record's "expiration_date" value
 * @method Stire               setState()                Sets the current record's "state" value
 * @method Stire               setUserId()               Sets the current record's "user_id" value
 * @method Stire               setLibraryId()            Sets the current record's "library_id" value
 * @method Stire               setPhotoAlbumId()         Sets the current record's "photo_album_id" value
 * @method Stire               setVideoAlbumId()         Sets the current record's "video_album_id" value
 * @method Stire               setPhotoAlbum()           Sets the current record's "PhotoAlbum" value
 * @method Stire               setVideoAlbum()           Sets the current record's "VideoAlbum" value
 * @method Stire               setAuthor()               Sets the current record's "Author" value
 * @method Stire               setPerson()               Sets the current record's "Person" collection
 * @method Stire               setFilm()                 Sets the current record's "Film" collection
 * @method Stire               setCinema()               Sets the current record's "Cinema" collection
 * @method Stire               setFestivalEdition()      Sets the current record's "FestivalEdition" collection
 * @method Stire               setFilmStire()            Sets the current record's "FilmStire" collection
 * @method Stire               setPersonStire()          Sets the current record's "PersonStire" collection
 * @method Stire               setCinemaStire()          Sets the current record's "CinemaStire" collection
 * @method Stire               setFestivalEditionStire() Sets the current record's "FestivalEditionStire" collection
 * 
 * @package    filmsi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStire extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('stire');
        $this->hasColumn('visit_count', 'integer', null, array(
             'type' => 'integer'
             ));
        $this->hasColumn('name', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('content_teaser', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('content_content', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('filename', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('meta_description', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('meta_keywords', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('url_key', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('about_stars', 'bool', null, array(
             'type' => 'bool',
             ));
        $this->hasColumn('publish_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('expiration_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('state', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => -1,
              1 => 0,
              2 => 1,
             ),
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('library_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('photo_album_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('video_album_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PhotoAlbum', array(
             'local' => 'photo_album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('VideoAlbum', array(
             'local' => 'video_album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as Author', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Person', array(
             'refClass' => 'PersonStire',
             'local' => 'stire_id',
             'foreign' => 'person_id'));

        $this->hasMany('Film', array(
             'refClass' => 'FilmStire',
             'local' => 'stire_id',
             'foreign' => 'film_id'));

        $this->hasMany('Cinema', array(
             'refClass' => 'CinemaStire',
             'local' => 'stire_id',
             'foreign' => 'cinema_id'));

        $this->hasMany('FestivalEdition', array(
             'refClass' => 'FestivalEditionStire',
             'local' => 'stire_id',
             'foreign' => 'festival_edition_id'));

        $this->hasMany('FilmStire', array(
             'local' => 'id',
             'foreign' => 'stire_id'));

        $this->hasMany('PersonStire', array(
             'local' => 'id',
             'foreign' => 'stire_id'));

        $this->hasMany('CinemaStire', array(
             'local' => 'id',
             'foreign' => 'stire_id'));

        $this->hasMany('FestivalEditionStire', array(
             'local' => 'id',
             'foreign' => 'stire_id'));

        $inlibrary0 = new inLibrary(array(
             'type_key' => 'Stire',
             'has_imdb' => false,
             'has_category' => false,
             'has_photo' => true,
             'has_video' => true,
             ));
        $this->actAs($inlibrary0);
    }
}