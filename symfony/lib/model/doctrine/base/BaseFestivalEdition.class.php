<?php

/**
 * BaseFestivalEdition
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property year $edition
 * @property string $filename
 * @property string $meta_description
 * @property string $meta_keywords
 * @property string $url_key
 * @property string $description_teaser
 * @property text $description_content
 * @property date $publish_date
 * @property enum $state
 * @property integer $festival_id
 * @property integer $user_id
 * @property integer $library_id
 * @property integer $photo_album_id
 * @property integer $video_album_id
 * @property PhotoAlbum $PhotoAlbum
 * @property VideoAlbum $VideoAlbum
 * @property sfGuardUser $Author
 * @property Festival $Festival
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $FestivalSections
 * @property Doctrine_Collection $FestivalEditionArticle
 * @property Doctrine_Collection $Stires
 * @property Doctrine_Collection $FestivalEditionStire
 * 
 * @method year                getEdition()                Returns the current record's "edition" value
 * @method string              getFilename()               Returns the current record's "filename" value
 * @method string              getMetaDescription()        Returns the current record's "meta_description" value
 * @method string              getMetaKeywords()           Returns the current record's "meta_keywords" value
 * @method string              getUrlKey()                 Returns the current record's "url_key" value
 * @method string              getDescriptionTeaser()      Returns the current record's "description_teaser" value
 * @method text                getDescriptionContent()     Returns the current record's "description_content" value
 * @method date                getPublishDate()            Returns the current record's "publish_date" value
 * @method enum                getState()                  Returns the current record's "state" value
 * @method integer             getFestivalId()             Returns the current record's "festival_id" value
 * @method integer             getUserId()                 Returns the current record's "user_id" value
 * @method integer             getLibraryId()              Returns the current record's "library_id" value
 * @method integer             getPhotoAlbumId()           Returns the current record's "photo_album_id" value
 * @method integer             getVideoAlbumId()           Returns the current record's "video_album_id" value
 * @method PhotoAlbum          getPhotoAlbum()             Returns the current record's "PhotoAlbum" value
 * @method VideoAlbum          getVideoAlbum()             Returns the current record's "VideoAlbum" value
 * @method sfGuardUser         getAuthor()                 Returns the current record's "Author" value
 * @method Festival            getFestival()               Returns the current record's "Festival" value
 * @method Doctrine_Collection getArticle()                Returns the current record's "Article" collection
 * @method Doctrine_Collection getFestivalSections()       Returns the current record's "FestivalSections" collection
 * @method Doctrine_Collection getFestivalEditionArticle() Returns the current record's "FestivalEditionArticle" collection
 * @method Doctrine_Collection getStires()                 Returns the current record's "Stires" collection
 * @method Doctrine_Collection getFestivalEditionStire()   Returns the current record's "FestivalEditionStire" collection
 * @method FestivalEdition     setEdition()                Sets the current record's "edition" value
 * @method FestivalEdition     setFilename()               Sets the current record's "filename" value
 * @method FestivalEdition     setMetaDescription()        Sets the current record's "meta_description" value
 * @method FestivalEdition     setMetaKeywords()           Sets the current record's "meta_keywords" value
 * @method FestivalEdition     setUrlKey()                 Sets the current record's "url_key" value
 * @method FestivalEdition     setDescriptionTeaser()      Sets the current record's "description_teaser" value
 * @method FestivalEdition     setDescriptionContent()     Sets the current record's "description_content" value
 * @method FestivalEdition     setPublishDate()            Sets the current record's "publish_date" value
 * @method FestivalEdition     setState()                  Sets the current record's "state" value
 * @method FestivalEdition     setFestivalId()             Sets the current record's "festival_id" value
 * @method FestivalEdition     setUserId()                 Sets the current record's "user_id" value
 * @method FestivalEdition     setLibraryId()              Sets the current record's "library_id" value
 * @method FestivalEdition     setPhotoAlbumId()           Sets the current record's "photo_album_id" value
 * @method FestivalEdition     setVideoAlbumId()           Sets the current record's "video_album_id" value
 * @method FestivalEdition     setPhotoAlbum()             Sets the current record's "PhotoAlbum" value
 * @method FestivalEdition     setVideoAlbum()             Sets the current record's "VideoAlbum" value
 * @method FestivalEdition     setAuthor()                 Sets the current record's "Author" value
 * @method FestivalEdition     setFestival()               Sets the current record's "Festival" value
 * @method FestivalEdition     setArticle()                Sets the current record's "Article" collection
 * @method FestivalEdition     setFestivalSections()       Sets the current record's "FestivalSections" collection
 * @method FestivalEdition     setFestivalEditionArticle() Sets the current record's "FestivalEditionArticle" collection
 * @method FestivalEdition     setStires()                 Sets the current record's "Stires" collection
 * @method FestivalEdition     setFestivalEditionStire()   Sets the current record's "FestivalEditionStire" collection
 * 
 * @package    filmsi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFestivalEdition extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('festival_edition');
        $this->hasColumn('edition', 'year', null, array(
             'type' => 'year',
             'notnull' => true,
             ));
        $this->hasColumn('filename', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('meta_description', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('meta_keywords', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('url_key', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('description_teaser', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('description_content', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('publish_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('state', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => -1,
              1 => 0,
              2 => 1,
             ),
             ));
        $this->hasColumn('festival_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('library_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('photo_album_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('video_album_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PhotoAlbum', array(
             'local' => 'photo_album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('VideoAlbum', array(
             'local' => 'video_album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as Author', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Festival', array(
             'local' => 'festival_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Article', array(
             'refClass' => 'FestivalEditionArticle',
             'local' => 'festival_edition_id',
             'foreign' => 'article_id'));

        $this->hasMany('FestivalSection as FestivalSections', array(
             'local' => 'id',
             'foreign' => 'festival_edition_id'));

        $this->hasMany('FestivalEditionArticle', array(
             'local' => 'id',
             'foreign' => 'festival_edition_id'));

        $this->hasMany('Stire as Stires', array(
             'refClass' => 'FestivalEditionStire',
             'local' => 'festival_edition_id',
             'foreign' => 'stire_id'));

        $this->hasMany('FestivalEditionStire', array(
             'local' => 'id',
             'foreign' => 'festival_edition_id'));

        $this->hasMany('Person as Persons', array(
             'refClass' => 'FestivalJudge',
             'local' => 'festival_edition_id',
             'foreign' => 'person_id'));

        $inlibrary0 = new inLibrary(array(
             'type_key' => 'FestivalEdition',
             'has_imdb' => false,
             'has_category' => false,
             'has_photo' => true,
             'has_video' => true,
             ));


        $this->actAs($inlibrary0);
    }
}