<?php

/**
 * Film
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    filmsi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Film extends BaseFilm
{
	protected $bestActors = null;
	protected $bestDirectors = null;
	protected $hasNonRedcarpetPhotos = null;
	protected $hasRedcarpetPhotos = null;


	public function  getUrlKey() {
		if ($this->_get('url_key') == '') {
			return Doctrine_Inflector::urlize($this->getName());
		} else {
			return $this->_get('url_key');
		}
	}

	public function getName()
	{
		return $this->getNameRo() . ($this->getNameEn() != '' ? ' (' . $this->getNameEn() . ')' : '');
	}
	
	public function preDelete($event)
	{
		// Delete the big file and the thumbnail
		//unlink(sfConfig::get('app_film_background_path') . '/' . $event->getInvoker()->getFilename());
		$event->getInvoker()->deleteFiles();

		return parent::preDelete($event);
	}
	
	public function deleteFiles()
	{
		$s3 = new AmazonS3(sfConfig::get('app_aws_key'), sfConfig::get('app_aws_secret_key'));
		
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/' . $this->getFilename());
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/t-' . $this->getFilename());
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/ts-' . $this->getFilename());
		
		$this->_set('filename', '');
	}
	
	public function createFile($source, $type = null)
	{	
		if (!isset($type)){
			$imageData = getimagesize($source);
			$type = $imageData['mime'];
		}
		
		$sourceData = file_get_contents($source);
		
		/* Initiate the Amazon S3 object */
		$s3 = new AmazonS3(sfConfig::get('app_aws_key'), sfConfig::get('app_aws_secret_key'));
		
		/* Create and upload the the big file */
		$photo = new sfThumbnail(sfConfig::get('app_film_sourceimage_width'), sfConfig::get('app_film_sourceimage_height'), true, false, 100);
		$photo->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/' . $this->getFilename(), array(
			'body' => $photo->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
		
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}

		/* Create and upload the thumbnail */
		$thumb = new sfThumbnail(sfConfig::get('app_film_thumbnail_width'), sfConfig::get('app_film_thumbnail_height'), true, false, 100);
		$thumb->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/t-' . $this->getFilename(), array(
			'body' => $thumb->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
				
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}

		/* Create and upload the small thumbnail */
		$thumb = new sfThumbnail(sfConfig::get('app_film_thumbnail_small_width'), sfConfig::get('app_film_thumbnail_small_height'), true, false, 100);
		$thumb->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_film_aws_s3_folder') . '/ts-' . $this->getFilename(), array(
			'body' => $thumb->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
		
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}
	}

	public function getEpisodeCount()
	{
		return Doctrine_Core::getTable('FilmEpisode')->countByFilm($this->getId());
	}

	public function deleteBackground()
	{
		$s3 = new AmazonS3(sfConfig::get('app_aws_key'), sfConfig::get('app_aws_secret_key'));
		
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), '/' . sfConfig::get('app_film_aws_s3_background_folder') . '/' . $this->getBackgroundFilename());
		
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response); exit;
		}
		
		$this->setBackgroundFilename(NULL);
		$this->save();
	}

	public function getFirstPhotos($limit = null)
	{
		return Doctrine_Query::create()
			->from('Photo p')
			->limit($limit)
			->where('p.album_id = ?', $this->getPhotoAlbumId())
			->orderBy('p.position')
			->execute();
	}

	public function getFirstVideos($limit = null)
	{
		return Doctrine_Query::create()
			->from('Video v')
			->limit($limit)
			->where('v.album_id = ?', $this->getVideoAlbumId())
			->orderBy('v.position')
			->execute();
	}

	public function getNewestArticles($limit = null)
	{
		return ArticleTable::getInstance()->getNewestByFilm($this->getId(), $limit);
	}

	public function getCheckIfVoted()
	{

	}

	public function getVoteDetails()
	{
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
		
		$count = $q['count'];
		
		if ($count == 0){
			return false;
		}
		
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ? and v.grade = 0', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
		
		$noVoteCount = $q['count'];
		
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ? and v.grade = 1', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
		
		$yesVoteCount = $q['count'];
		
		$noVotePercent = 100 * $noVoteCount / $count;
		$yesVotePercent = 100 * $yesVoteCount / $count;
		

		return array(
			'yesCount' => $yesVoteCount,
			'yesPercent' => $yesVotePercent,
			'noCount' => $noVoteCount,
			'noPercent' => $noVotePercent,
		);
	}

	public function getVoteYesCount()
	{
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $q['count'];
	}

	public function checkIfIpVotedToday($ip)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->andWhere('v.ip = ?', $ip)
			->andWhere('DATE(v.created_at) = DATE(NOW())')
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return (int)$q['count'] === 0 ? false : true;
	}

	public function getRelatedStires($limit = null, $page = null, $returnArray = true)
    {
		return StireTable::getInstance()->getRelatedByFilm($this->getId(), $limit, $page, $returnArray);
    }

	public function getRelatedStiresCount()
    {
		return StireTable::getInstance()->getRelatedByFilmCount($this->getId());
    }

	public function getShopUrls()
	{
		return ShopTable::getInstance()->getFormattedByFilm($this->getId());
	}

	public function getShops()
	{
		return ShopTable::getInstance()->getByFilm($this->getId());
	}

	public function getRecentAwardsDetailed($limit = 5)
    {
        return FestivalSectionParticipantTable::getInstance()->getDetailedByFilm($this->getImdb(), $limit);
    }

	public function getBestActors($limit)
	{
		return isset($this->bestActors) ? $this->bestActors : FilmPersonTable::getInstance()->getBestActorsByFilm($this->getId(), $limit);
	}

	public function getBestDirectors()
	{
		return isset($this->bestDirectors) ? $this->bestDirectors : FilmPersonTable::getInstance()->getBestDirectorsByFilm($this->getId());
	}
	
	public function getLocationsWhereIsInCinema()
	{
		return CinemaScheduleTable::getInstance()->getLocationsByFilm($this->getId());
	}
	
	public function isInCinema()
	{
		if ($this->getStatusCinema() != '1'){
			return false;
		}
		
		if ($this->getStatusCinemaYear() != '0' && $this->getStatusCinemaMonth() != '0' && $this->getStatusCinemaDay() != '0'){
			if(strtotime($this->getStatusCinemaYear() . '-' . $this->getStatusCinemaMonth() . '-' . $this->getStatusCinemaDay()) < time()){
				return true;
			} else {
				return false;
			}
		} elseif ($this->getStatusCinemaYear() != '0' && $this->getStatusCinemaMonth() != '0') {
			if(strtotime($this->getStatusCinemaYear() . '-' . $this->getStatusCinemaMonth() . '-01') < time()){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	public function isOnDvd()
	{
		if ($this->getStatusDvd() != '1'){
			return false;
		}
		
		if ($this->getStatusDvdYear() != '0' && $this->getStatusDvdMonth() != '0' && $this->getStatusDvdDay() != '0'){
			if(strtotime($this->getStatusDvdYear() . '-' . $this->getStatusDvdMonth() . '-' . $this->getStatusDvdDay()) < time()){
				return true;
			} else {
				return false;
			}
		} elseif ($this->getStatusDvdYear() != '0' && $this->getStatusDvdMonth() != '0') {
			if(strtotime($this->getStatusDvdYear() . '-' . $this->getStatusDvdMonth() . '-01') < time()){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	public function isOnBluray()
	{
		if ($this->getStatusBluray() != '1'){
			return false;
		}
		
		if ($this->getStatusBlurayYear() != '0' && $this->getStatusBlurayMonth() != '0' && $this->getStatusBlurayDay() != '0'){
			if(strtotime($this->getStatusBlurayYear() . '-' . $this->getStatusBlurayMonth() . '-' . $this->getStatusBlurayDay()) < time()){
				return true;
			} else {
				return false;
			}
		} elseif ($this->getStatusBlurayYear() != '0' && $this->getStatusBlurayMonth() != '0') {
			if(strtotime($this->getStatusBlurayYear() . '-' . $this->getStatusBlurayMonth() . '-01') < time()){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	public function isOnline()
	{
		if ($this->getStatusOnline() != '1'){
			return false;
		}
		
		if ($this->getStatusOnlineYear() != '0' && $this->getStatusOnlineMonth() != '0' && $this->getStatusOnlineDay() != '0'){
			if(strtotime($this->getStatusOnlineYear() . '-' . $this->getStatusOnlineMonth() . '-' . $this->getStatusOnlineDay()) < time()){
				return true;
			} else {
				return false;
			}
		} elseif ($this->getStatusOnlineYear() != '0' && $this->getStatusOnlineMonth() != '0') {
			if(strtotime($this->getStatusOnlineYear() . '-' . $this->getStatusOnlineMonth() . '-01') < time()){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	public function hasNonRedcarpetPhotos()
	{
		if (!isset($this->hasNonRedcarpetPhotos)){
			$this->hasNonRedcarpetPhotos = PhotoTable::getInstance()->hasNonRedcarpetByAlbum($this->getPhotoAlbumId());
		} 
		
		return $this->hasNonRedcarpetPhotos;
	}
	
	public function hasRedcarpetPhotos()
	{
		if (!isset($this->hasRedcarpetPhotos)){
			$this->hasRedcarpetPhotos = PhotoTable::getInstance()->hasRedcarpetByAlbum($this->film->getPhotoAlbumId());
		} 
		
		return $this->hasRedcarpetPhotos;
	}
		
}