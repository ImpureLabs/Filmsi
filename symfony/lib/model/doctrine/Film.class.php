<?php

/**
 * Film
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    filmsi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Film extends BaseFilm
{	
	public function getName()
	{
		return $this->getNameRo() . ($this->getNameEn() != '' ? ' (' . $this->getNameEn() . ')' : '');
	}
	
	public function preDelete($event)
	{
		// Delete the big file and the thumbnail
		unlink(sfConfig::get('app_film_background_path') . '/' . $event->getInvoker()->getFilename());
		unlink(sfConfig::get('app_film_path') . '/' . $event->getInvoker()->getFilename());
		unlink(sfConfig::get('app_film_path') . '/t-' . $event->getInvoker()->getFilename());
		unlink(sfConfig::get('app_film_path') . '/ts-' . $event->getInvoker()->getFilename());

		return parent::preDelete($event);
	}
	
	public function createFile()
	{
		$sourceFile = sfConfig::get('app_film_path') . '/' . $this->getFilename();
		
		if (!file_exists($sourceFile)){
			throw new sfException('Source file not available: ' . $sourceFile);
		}

		/* Create the big file */
		$photo = new sfThumbnail(sfConfig::get('app_film_sourceimage_size'), sfConfig::get('app_film_sourceimage_size'));
		$photo->loadFile($sourceFile);
		$photo->save(sfConfig::get('app_film_path') . '/' . $this->getFilename());

		/* Create the thumbnail */
		$thumb = new sfThumbnail(sfConfig::get('app_film_thumbnail_size'), sfConfig::get('app_film_thumbnail_size'));
		$thumb->loadFile($sourceFile);
		$thumb->save(sfConfig::get('app_film_path') . '/t-' . $this->getFilename());

		/* Create the small thumbnail */
		$thumb = new sfThumbnail(sfConfig::get('app_film_thumbnail_small_size'), sfConfig::get('app_film_thumbnail_small_size'));
		$thumb->loadFile($sourceFile);
		$thumb->save(sfConfig::get('app_film_path') . '/ts-' . $this->getFilename());
	}

	public function getEpisodeCount()
	{
		return Doctrine_Core::getTable('FilmEpisode')->countByFilm($this->getId());
	}

	public function deleteBackground()
	{
		unlink(sfConfig::get('app_film_background_path') . '/' . $this->getBackgroundFilename());
		$this->setBackgroundFilename(NULL);
		$this->save();
	}

	public function getFirstPhotos($limit = null)
	{
		return Doctrine_Query::create()
			->from('Photo p')
			->limit($limit)
			->where('p.album_id = ?', $this->getPhotoAlbumId())
			->orderBy('p.position')
			->execute();
	}

	public function getFirstVideos($limit = null)
	{
		return Doctrine_Query::create()
			->from('Video v')
			->limit($limit)
			->where('v.album_id = ?', $this->getVideoAlbumId())
			->orderBy('v.position')
			->execute();
	}

	public function getNewestArticles($limit = null)
	{
		return Doctrine_Query::create()
			->from('Article a')
			->innerJoin('a.FilmArticle fa')
			->limit($limit)
			->where('fa.film_id = ?', $this->getId())
			->andWhere('a.state = 1 AND (expiration_date IS NULL OR expiration_date > NOW())')
			->orderBy('a.publish_date DESC')
			->execute();
	}

	public function getCheckIfVoted()
	{

	}

	public function getVoteScore()
	{
		$q = Doctrine_Query::create()
			->select('AVG(v.grade) score')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $q['score'];

	}

	public function getVoteCount()
	{
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $q['count'];
	}

	public function checkIfIpVotedToday($ip)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(v.id) count')
			->from('FilmVote v')
			->where('v.film_id = ?', $this->getId())
			->andWhere('v.ip = ?', $ip)
			->andWhere('DATE(v.created_at) = DATE(NOW())')
			->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return (int)$q['count'] === 0 ? false : true;
	}
}