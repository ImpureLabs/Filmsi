<?php

/**
 * LibraryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LibraryTable extends Doctrine_Table
{
	public function getByIds($ids)
	{
		return Doctrine_Query::create()
			->from('Library l')
			->whereIn('l.id', $ids)
			->execute();
	}

	public function getFilteredObjects($filters, $limit = null)
	{
		$q = Doctrine_Query::create()
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id DESC');
			
			
		if (isset($limit)){
			$q->limit($limit);
		}

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			} 
		}
		
		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}
		
		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}
		
		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		
		if (isset($filters['offset'])){
			$q->offset($filters['offset']);
		}
		
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');	
		}
		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}
		
		if (count($types) == 0){
			return array();
		}
		$q->andWhereIn('l.type', $types);
		
		return $q->execute();
	}  

	public function countFilteredObjects($filters)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(l.id) counter')
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC');

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			}
		}
		
		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}
		
		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}
		
		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');	
		}
		
		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}
		
		if (count($types) == 0){
			return 0;
		}
		
		$q->andWhereIn('l.type', $types);
		
		$q = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SCALAR);
		
		return $q['l_counter'];
	}

	public function countFilteredActive($filters)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(l.id) counter')
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC');

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			}
		}

		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}

		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}

		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');
		}

		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}

		if (count($types) == 0){
			return 0;
		}

		$q->andWhereIn('l.type', $types);

		$q->andWhere('l.state = 1');

		$q = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SCALAR);

		return $q['l_counter'];
	}

	public function countFilteredWithImdb($filters)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(l.id) counter')
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC');

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			}
		}

		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}

		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}

		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');
		}

		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}

		if (count($types) == 0){
			return 0;
		}

		$q->andWhereIn('l.type', $types);

		$q->andWhere('l.imdb IS NOT NULL');

		$q = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SCALAR);

		return $q['l_counter'];
	}

	public function countFilteredWithPhoto($filters)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(l.id) counter')
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC');

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			}
		}

		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}

		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}

		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');
		}

		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}

		if (count($types) == 0){
			return 0;
		}

		$q->andWhereIn('l.type', $types);

		$q->andWhere('l.photo_album_id IS NOT NULL');

		$q = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SCALAR);

		return $q['l_counter'];
	}

	public function countFilteredWithVideo($filters)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(l.id) counter')
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC');

		if (isset($filters['id']) && !empty($filters['id'])){
			$q->addWhere('l.id = ?', $filters['id']);
		}

		if (isset($filters['imdb']) && !empty($filters['imdb'])){
			$q->addWhere('l.imdb = ?', $filters['imdb']);
		}

		if (isset($filters['with_photo'])){
			if (isset($filters['with_video'])){
				$q->addWhere('l.photo_album_id IS NOT NULL OR l.video_album_id IS NOT NULL');
			} else {
				$q->addWhere('l.photo_album_id IS NOT NULL');
			}
		} else {
			if (isset($filters['with_video'])){
				$q->addWhere('l.video_album_id IS NOT NULL');
			}
		}

		if (isset($filters['keyword']) && !empty($filters['keyword'])){
			$q->addWhere('l.name REGEXP ?', '(^| |-)' . $filters['keyword']);
		}

		if (isset($filters['date_from']) && !empty($filters['date_from'])){
			$q->addWhere('l.publish_date >= ?', $filters['date_from']);
		}

		if (isset($filters['date_to']) && !empty($filters['date_to'])){
			$q->addWhere('l.publish_date <= ?', $filters['date_to']);
		}

		if (isset($filters['category']) && !empty($filters['category'])){
			$q->addWhere('l.category LIKE ?', '%' . $filters['category'] . '%');
		}

		if (isset($filters['author']) && !empty($filters['author'])){
			$q->addWhere('l.user_id = ?', $filters['author']);
		}
		/* If the type filter is set use it, otherwise get all the types the loggged in user has permission to */
		$types = array();
		if (isset($filters['type']) && !empty($filters['type'])){
			$types = array($filters['type']);
		} else {
			$types = sfConfig::get('app_library_types');
		}

		foreach ($types as $key => $type){
			if (!sfContext::getInstance()->getUser()->hasCredential($type)){
				unset($types[$key]);
			}
		}

		if (count($types) == 0){
			return 0;
		}

		$q->andWhereIn('l.type', $types);

		$q->andWhere('l.video_album_id IS NOT NULL');

		$q = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SCALAR);

		return $q['l_counter'];
	}
	
        public function getPending($offset = 0)
	{
		return Doctrine_Query::create()
			->from('Library l')
			->innerJoin('l.Author u')
			->orderBy('l.id ASC')
			->addWhere('l.state = 0')
			->limit(50)
			->execute();
	}

	public function delete($ids)
	{
		if (!isset($ids) || !is_array($ids) || count($ids) == 0){
			return false;
		}
		
		$connection = $this->getConnection();

		//begin Transaction
		$connection->beginTransaction();
		
		$libraryObjects = Doctrine_Query::create()
			->from('Library l')
			->whereIn('l.id', $ids)
			->execute();
			
		foreach ($libraryObjects as $libraryObject){
			$object = Doctrine_Core::getTable($libraryObject->getType())->findOneByLibraryId($libraryObject->getId());
			$object->delete();
		}
		
		
		$q = Doctrine_Query::create()
			->delete('Library l')
			->whereIn('l.id', $ids)
			->execute();
		
		// Commit Transaction
    $connection->commit();
	}
	
	public function allow($id)
	{
		$connection = $this->getConnection();

		//begin Transaction
		$connection->beginTransaction();
		
		$libraryObject = Doctrine_Core::getTable('Library')->findOneById($id);
		$libraryObject->setState(Library::STATE_ACTIVE);
		$libraryObject->save();
		
		Doctrine_Core::getTable($libraryObject->getType())->allow($libraryObject->getId());
		
		// Commit Transaction
    $connection->commit();
	}
	
	public function cloneObjects($ids)
	{
		if (!isset($ids) || !is_array($ids) || count($ids) == 0){
			return false;
		}
		
		$connection = $this->getConnection();

		//begin Transaction
		$connection->beginTransaction();
		
		$libraryObjects = Doctrine_Query::create()
			->from('Library l')
			->whereIn('l.id', $ids)
			->execute();
			
		foreach ($libraryObjects as $libraryObject){
			Doctrine_Core::getTable($libraryObject->getType())->cloneObject($libraryObject->getId());
		}
		
		// Commit Transaction
    $connection->commit();
	}

        public function updateVisitCount()
        {
            $libraryVisits =  Doctrine_Query::create()
                ->select('COUNT(v.id) count, v.library_id')
                ->from('Visit v')
                ->groupBy('v.library_id')
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

            foreach ($libraryVisits as $libraryVisit){
                Doctrine_Query::create()
                    ->update('Library l')
                    ->set('l.visit_count', '?', $libraryVisit['count'])
                    ->where('l.id = ?', $libraryVisit['library_id'])
                    ->execute();
            }
        }
}