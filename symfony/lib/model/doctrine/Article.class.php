<?php

/**
 * Article
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    articlesi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Article extends BaseArticle
{
	public function  getUrlKey() {
		if ($this->_get('url_key') == '') {
			return Doctrine_Inflector::urlize($this->getName());
		} else {
			return $this->_get('url_key');
		}
	}

	public function preDelete($event)
	{
		// Delete the big file and the thumbnail
		$event->getInvoker()->deleteFiles();

		return parent::preDelete($event);
	}
	
	public function deleteFiles()
	{
		$s3 = new AmazonS3(sfConfig::get('app_aws_key'), sfConfig::get('app_aws_secret_key'));
		
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/' . $this->getFilename());
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/t-' . $this->getFilename());
		$response = $s3->delete_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/ts-' . $this->getFilename());
		
		$this->_set('filename', '');
	}
	
	public function createFile($source, $type = null)
	{	
		if (!isset($type)){
			$imageData = getimagesize($source);
			$type = $imageData['mime'];
		}
		
		$pices = getimagesize($source);
		if ($pices[0] < $pices[1]){
			$isTaller = true;
		} else {
			$isTaller = false;
		}
		
		$sourceData = file_get_contents($source);
		
		/* Initiate the Amazon S3 object */
		$s3 = new AmazonS3(sfConfig::get('app_aws_key'), sfConfig::get('app_aws_secret_key'));
		
		/* Create and upload the the big file */
		if ($isTaller){
			$photo = new sfThumbnail(null, sfConfig::get('app_article_sourceimage_height'), true, false, 100);
		} else {
			$photo = new sfThumbnail(sfConfig::get('app_article_sourceimage_width'), null, true, false, 100);
		}
		$photo->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/' . $this->getFilename(), array(
			'body' => $photo->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
		
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}

		/* Create and upload the thumbnail */
		if ($isTaller){
			$thumb = new sfThumbnail(null, sfConfig::get('app_article_thumbnail_height'), true, false, 100);
		} else {
			$thumb = new sfThumbnail(sfConfig::get('app_article_thumbnail_width'), null, true, false, 100);
		}
		$thumb->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/t-' . $this->getFilename(), array(
			'body' => $thumb->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
				
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}

		/* Create and upload the small thumbnail */
		if ($isTaller){
			$thumb = new sfThumbnail(null, sfConfig::get('app_article_thumbnail_small_height'), true, false, 100);
		} else {
			$thumb = new sfThumbnail(sfConfig::get('app_article_thumbnail_small_width'), null, true, false, 100);
		}
		$thumb->loadData($sourceData, $type);
		
		$response = $s3->create_object(sfConfig::get('app_aws_bucket'), sfConfig::get('app_article_aws_s3_folder') . '/ts-' . $this->getFilename(), array(
			'body' => $thumb->toString($type),
			'contentType' => $type,
			'meta' => array(
				'Expires'		=> 'Thu, 16 Apr 2020 05:00:00 GMT',
				'Cache-Control' => 'max-age=315360000'
			),
			'acl' => AmazonS3::ACL_PUBLIC
		));
		
		if (!$response->isOk()){
			echo '<pre>'; var_dump($response);
		}
	}

	public function getFilenameIsTall()
	{
		$size = getimagesize(sfConfig::get('app_aws_s3_path') . sfConfig::get('app_aws_bucket') . '/' . sfConfig::get('app_article_aws_s3_folder') .  '/' . $this->getFilename());

		if ($size[1] > $size[0]){
			return true;
		} else {
			return false;
		}
	}

	public function getRelated($count)
	{
		/* Get the id of the articles related to any of the films */
		$filmArticles = Doctrine_Core::getTable('FilmArticle')->getRelatedArticles($this->getId());
		/* Get the id of the articles related to any of the persons */
		$personArticles = Doctrine_Core::getTable('PersonArticle')->getRelatedArticles($this->getId());
		/* Get the id of the articles related to any of the cinemas */
		$cinemaArticles = Doctrine_Core::getTable('CinemaArticle')->getRelatedArticles($this->getId());
		/* Get the id of the articles related to any of the festival editions */
		$festivalEditionArticles = Doctrine_Core::getTable('FestivalEditionArticle')->getRelatedArticles($this->getId());

		$articleIds = array_merge($filmArticles, $personArticles, $cinemaArticles, $festivalEditionArticles);
		return Doctrine_Core::getTable('Article')->findLatestByIds($count, $articleIds);
	}

	public function getCountComments()
	{
		return Doctrine_Core::getTable('Comment')->getCountByEntity('Article', $this->getLibraryId());
	}
}