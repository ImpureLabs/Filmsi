<?php

/**
 * Person
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    filmsi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Person extends BasePerson
{
	public function  getUrlKey() {
		if ($this->_get('url_key') == '') {
			return Doctrine_Inflector::urlize($this->getName());
		} else {
			return $this->_get('url_key');
		}
	}

    public function getName()
    {
            return $this->getFirstName() . ' ' . $this->getLastName();
    }

    public function preDelete($event)
    {
            // Delete the big file and the thumbnail
            unlink(sfConfig::get('app_person_path') . '/' . $event->getInvoker()->getFilename());
            unlink(sfConfig::get('app_person_path') . '/t-' . $event->getInvoker()->getFilename());
            unlink(sfConfig::get('app_person_path') . '/ts-' . $event->getInvoker()->getFilename());

            return parent::preDelete($event);
    }

    public function createFile()
    {
            $sourceFile = sfConfig::get('app_person_path') . '/' . $this->getFilename();

            if (!file_exists($sourceFile)){
                    throw new sfException('Source file not available: ' . $sourceFile);
            }

            /* Create the big file */
            $photo = new sfThumbnail(sfConfig::get('app_person_sourceimage_width'), sfConfig::get('app_person_sourceimage_height'), true, false, 100);
            $photo->loadFile($sourceFile);
            $photo->save(sfConfig::get('app_person_path') . '/' . $this->getFilename());

            /* Create the thumbnail */
            $thumb = new sfThumbnail(sfConfig::get('app_person_thumbnail_width'), sfConfig::get('app_person_thumbnail_height'), true, false, 100);
            $thumb->loadFile($sourceFile);
            $thumb->save(sfConfig::get('app_person_path') . '/t-' . $this->getFilename());

            /* Create the small thumbnail */
            $thumb = new sfThumbnail(sfConfig::get('app_person_thumbnail_small_width'), sfConfig::get('app_person_thumbnail_small_height'), true, false, 100);
            $thumb->loadFile($sourceFile);
            $thumb->save(sfConfig::get('app_person_path') . '/ts-' . $this->getFilename());
    }

    public function getRelatedStires($limit = null, $page = null, $returnArray = true)
    {
		return StireTable::getInstance()->getRelatedByPerson($this->getId(), $limit, $page, $returnArray);
    }

	public function getRelatedStiresCount()
    {
		return StireTable::getInstance()->getRelatedByPersonCount($this->getId());
    }

    public function getMostViewedFilmsByRole($limit = null, $role = null, $hydrator = Doctrine_Core::HYDRATE_ARRAY)
    {
        $q = Doctrine_Query::create()
            ->from('Film f')
            ->innerJoin('f.FilmPerson fp')
            ->where('fp.person_id = ? AND f.state = 1', $this->getId())
            ->orderBy('f.visit_count DESC');

        if (isset($role)){
            $q->andWhere('fp.is_' . $role . ' = 1');
        }

        if (isset($limit)){
            $q->limit($limit);
        }

        return $q->execute(array(), $hydrator);
    }

    public function getRecentAwardsDetailed($limit = 5)
    {
        return FestivalSectionParticipantTable::getInstance()->getDetailedByPerson($this->getImdb(), $limit);
    }

}