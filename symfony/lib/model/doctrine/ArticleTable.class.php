<?php

/**
 * ArticleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ArticleTable extends Doctrine_Table
{
	public function allow($libraryId)
	{
		$album = Doctrine_Core::getTable('Article')->findOneByLibraryId($libraryId);
		
		/* Update album state*/
		$album->setState(Library::STATE_ACTIVE);
		$album->save();
	}

	public function cloneObject($libraryId)
	{
		return;
	}

	public function getList($categoryId = null, $limit = null, $page = null)
	{
		$q = Doctrine_Query::create()
			->from('Article a')
                        ->where('a.state = 1')
			->orderBy('a.publish_date DESC');

		if (!empty($categoryId)){
			$q->innerJoin('a.ArticleCategory ac')
                          ->addWhere('ac.category_id = ?', $categoryId);
		}

		if (!empty ($limit)){
			$q->limit($limit);
		}

		if (!empty ($page)){
			$q->offset(($page - 1) * $limit );
		}

		return $q->execute();
	}

	public function countByCategory($categoryId = null)
	{
		$q = Doctrine_Query::create()
			->select('COUNT(a.id)')
			->from('Article a')
                        ->where('a.state = 1');

		if (!empty($categoryId)){
			$q->innerJoin('a.ArticleCategory ac')
				->addWhere('ac.category_id = ?', $categoryId);
		}

		$count = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $count['COUNT'];
	}

	public function findLatestByIds($count, $articleIds)
	{
            if (count($articleIds) == 0){
                return array();
            }

            return Doctrine_Query::create()
                    ->from('Article a')
                    ->where('a.state = 1')
                    ->andWhereIn('a.id', $articleIds)
                    ->limit($count)
                    ->orderBy('a.publish_date DESC')
                    ->execute();
	}

        public function getMostVisited($limit)
        {
            $libraryArticles = Doctrine_Query::create()
                ->select('l.id')
                ->from('Library l')
                ->where('l.type = "Article" AND l.state = 1')
                ->orderBy('l.visit_count DESC')
                ->limit($limit)
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

            $articles = array();
            foreach($libraryArticles as $libraryArticle){
                $articles[] = Doctrine_Core::getTable('Article')->findOneByLibraryId($libraryArticle['id']);
            }
            return $articles;
        }
}