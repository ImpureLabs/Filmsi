<?php

/**
 * StireTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StireTable extends Doctrine_Table
{
	public static function getInstance()
	{
		return Doctrine_Core::getTable('Stire');
	}

	public function allow($libraryId)
	{
		$album = Doctrine_Core::getTable('Stire')->findOneByLibraryId($libraryId);
		
		/* Update album state*/
		$album->setState(Library::STATE_ACTIVE);
		$album->save();
	}

	public function cloneObject($libraryId)
	{
		return;
	}

	public function getList($limit = null, $page = null)
	{
            $q = Doctrine_Query::create()
                    ->from('Stire s')
                    ->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
                    ->orderBy('s.publish_date, s.id DESC');

            if (!empty ($limit)){
                    $q->limit($limit);
            }

            if (!empty ($page)){
                    $q->offset(($page - 1) * $limit );
            }

            return $q->execute();
	}

	public function getAboutStars($limit = null)
	{
            $q = Doctrine_Query::create()
                    ->from('Stire s')
                    ->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
					->andWhere('s.about_stars = 1')
                    ->orderBy('s.publish_date, s.id DESC');

            if (!empty ($limit)){
                    $q->limit($limit);
            }

            return $q->execute();
	}

	public function getCount()
	{
		$q = Doctrine_Query::create()
			->select('COUNT(s.id)')
			->from('Stire s')
			->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())');

		$count = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

		return $count['COUNT'];
	}

	public function findLatestByIds($count, $stireIds = array())
	{
            if (count($stireIds) == 0){
                return array();
            }

            return Doctrine_Query::create()
				->from('Stire s')
				->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
				->andWhereIn('s.id', $stireIds)
				->limit($count)
				->orderBy('s.publish_date, s.id DESC')
				->execute();
	}

	public function getRelatedByFilmCount($filmId)
    {
        $q = Doctrine_Query::create()
            ->select('COUNT(s.id) count')
            ->from('Stire s')
            ->innerJoin('s.FilmStire fs')
            ->where('fs.film_id = ? AND s.state = 1', $filmId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        return $q['count'];
    }

	public function getRelatedByCinemaCount($cinemaId)
    {
        $q = Doctrine_Query::create()
            ->select('COUNT(s.id) count')
            ->from('Stire s')
            ->innerJoin('s.CinemaStire fs')
            ->where('fs.cinema_id = ? AND s.state = 1', $cinemaId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        return $q['count'];
    }

	public function getRelatedByPersonCount($personId)
    {
        $q = Doctrine_Query::create()
            ->select('COUNT(s.id) count')
            ->from('Stire s')
            ->innerJoin('s.PersonStire fs')
            ->where('fs.person_id = ? AND s.state = 1', $personId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        return $q['count'];
    }

	public function getRelatedByFilm($filmId, $limit = null, $page = null, $returnArray = true)
    {
		if (!is_array($filmId)){
			$filmId = array($filmId);
		}

        $q = Doctrine_Query::create()
            ->from('Stire s')
            ->innerJoin('s.FilmStire fs')
            ->where('s.state = 1')
			->andWhereIn('fs.film_id', $filmId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->orderBy('s.publish_date, s.id DESC');

        if (!empty ($limit)){
                $q->limit($limit);
        }

        if (!empty ($page)){
                $q->offset(($page - 1) * $limit );
        }

        if ($returnArray){
            return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        } else {
            return $q->execute();
        }
    }

	public function getRelatedByPerson($personId, $limit = null, $page = null, $returnArray = true)
    {
        $q = Doctrine_Query::create()
            ->from('Stire s')
            ->innerJoin('s.PersonStire fs')
            ->where('fs.person_id = ? AND s.state = 1', $personId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->orderBy('s.publish_date, s.id DESC');

        if (!empty ($limit)){
                $q->limit($limit);
        }

        if (!empty ($page)){
                $q->offset(($page - 1) * $limit );
        }

        if ($returnArray){
            return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        } else {
            return $q->execute();
        }
    }

	public function getLatestRelatedToFestivalEditions($limit)
	{
		return Doctrine_Query::create()
			->from('Stire s')
			->innerJoin('s.FestivalEditionStire fes')
			->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
			->orderBy('s.publish_date, s.id DESC')
			->limit($limit)
			->execute();
	}

	public function getRelatedByFestivalEdition($festivalEditionId, $limit = null, $page = null, $returnArray = true)
    {
        $q = Doctrine_Query::create()
            ->from('Stire s')
            ->innerJoin('s.FestivalEditionStire fs')
            ->where('fs.festival_edition_id = ? AND s.state = 1', $festivalEditionId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->orderBy('s.publish_date, s.id DESC');

        if (!empty ($limit)){
                $q->limit($limit);
        }

        if (!empty ($page)){
                $q->offset(($page - 1) * $limit );
        }

        if ($returnArray){
            return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        } else {
            return $q->execute();
        }
    }

	public function getRelatedByFestivalEditionCount($festivalEditionId)
    {
        $q = Doctrine_Query::create()
            ->select('COUNT(s.id) count')
            ->from('Stire s')
            ->innerJoin('s.FestivalEditionStire fs')
            ->where('fs.festival_edition_id = ? AND s.state = 1', $festivalEditionId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        return $q['count'];
    }

	public function getRelatedByCinema($cinemaId, $limit = null, $page = null, $returnArray = true)
    {
		if (!is_array($cinemaId)){
			$cinemaId = array($cinemaId);
		}

        $q = Doctrine_Query::create()
            ->from('Stire s')
            ->innerJoin('s.CinemaStire fs')
            ->where('s.state = 1')
			->andWhereIn('fs.cinema_id', $cinemaId)
			->andWhere('s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
            ->orderBy('s.publish_date, s.id DESC');

        if (!empty ($limit)){
                $q->limit($limit);
        }

        if (!empty ($page)){
                $q->offset(($page - 1) * $limit );
        }

        if ($returnArray){
            return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        } else {
            return $q->execute();
        }
    }

	public function getBest($limit)
	{
		return Doctrine_Query::create()
			->from('Stire s')
			->orderBy('s.visit_count DESC')
			->where('s.state = 1 AND s.publish_date IS NOT NULL AND s.publish_date <= NOW() AND (s.expiration_date IS NULL OR s.expiration_date > NOW())')
			->limit($limit)
			->execute();
	}

	public function getNewest($limit = null)
	{
		return Doctrine_Query::create()
			->from('Stire a')
			->limit($limit)
			->andWhere('a.state = 1 AND a.publish_date IS NOT NULL AND a.publish_date <= NOW() AND (a.expiration_date IS NULL OR a.expiration_date > NOW())')
			->orderBy('a.publish_date, a.id DESC')
			->execute();
	}

	public function getMostVisited($limit)
	{
		return Doctrine_Query::create()
			->from('Stire a')
			->where('a.state = 1 AND a.publish_date IS NOT NULL AND a.publish_date <= NOW() AND (a.expiration_date IS NULL OR a.expiration_date > NOW())')
			->orderBy('a.visit_count DESC')
			->limit($limit)
			->execute();
	}

	public function getMostCommented($limit)
	{
		return Doctrine_Query::create()
			->select('a.id, a.url_key, a.name, a.content_teaser, a.filename, COUNT(c.id) comment_count')
			->from('Stire a')
			->leftJoin('a.Comment c')
			->groupBy('c.model_library_id')
			->where('a.state = 1 AND a.publish_date IS NOT NULL AND a.publish_date <= NOW() AND (a.expiration_date IS NULL OR a.expiration_date > NOW())')
			->andWhere('c.model = "Stire"')
			->orderBy('comment_count DESC')
			->limit($limit)
			->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
	}

	public function cleanPhotoAlbums($photoAlbumId)
	{
		return Doctrine_Query::create()
			->update('Stire a')
			->set('a.photo_album_id', 'null')
			->where('a.photo_album_id = ?', $photoAlbumId)
			->execute();
	}

	public function cleanVideoAlbums($videoAlbumId)
	{
		return Doctrine_Query::create()
			->update('Stire a')
			->set('a.video_album_id', 'null')
			->where('a.video_album_id = ?', $videoAlbumId)
			->execute();
	}
	
	public function getForSearch($term, $limit)
	{
		$term = preg_replace('/[^a-zA-Z]/i', ' ', $term);
		$term = preg_replace('/\s+/i', ' ', $term);
		$terms = explode(' ', $term);
		unset($term);
		
		$qArray = array();
		$qString = '';
		foreach ($terms as $term){
			$qString = 's.name REGEXP ? or s.meta_keywords REGEXP ? ';
			$qArray[] = '(^| |-)' . $term;
			$qArray[] = '(^| |-)' . $term;
			
		}
		
		return Doctrine_Query::create()
			->from('Stire s')
			->where('s.state = 1')
			->andWhere($qString, $qArray)
			->orderBy('s.visit_count desc')
			->limit($limit)
			->execute();
	}
}